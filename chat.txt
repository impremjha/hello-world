### **Java Spring Boot Microservice for Conversation Management**  
Below is a fully implemented microservice using **Spring Boot, JPA, and REST APIs** to manage conversations.  

---

### **1. Dependencies (Spring Boot + JPA)**
Ensure your `pom.xml` includes:
```xml
<dependencies>
    <!-- Spring Boot Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- PostgreSQL/MySQL Driver -->
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- Lombok (optional for reducing boilerplate code) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>
```

---

### **2. Database Configuration (application.properties)**
Modify `src/main/resources/application.properties`:
```properties
spring.datasource.url=jdbc:postgresql://localhost:5432/chatbot
spring.datasource.username=your_db_user
spring.datasource.password=your_db_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
```

---

### **3. Entity Classes**
#### **Report Entity**
```java
package com.chatbot.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Report {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    @Column(nullable = false, unique = true)
    private String reportName;

    private LocalDateTime createdAt = LocalDateTime.now();
}
```

---

#### **Conversation Entity**
```java
package com.chatbot.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Conversation {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    @Column(nullable = false)
    private String userId; // Storing user ID as string

    @ManyToOne
    @JoinColumn(name = "report_id", nullable = false)
    private Report report;

    @Column(nullable = false)
    private String title;

    private LocalDateTime createdAt = LocalDateTime.now();
    private LocalDateTime updatedAt = LocalDateTime.now();
    private LocalDateTime deletedAt; // Soft delete field
}
```

---

#### **Message Entity**
```java
package com.chatbot.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Message {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    @ManyToOne
    @JoinColumn(name = "conversation_id", nullable = false)
    private Conversation conversation;

    @Enumerated(EnumType.STRING)
    private Sender sender;

    @Column(nullable = false, columnDefinition = "TEXT")
    private String messageText;

    private UUID parentMessageId; // To link messages

    private LocalDateTime createdAt = LocalDateTime.now();

    public enum Sender {
        USER, BOT
    }
}
```

---

### **4. Repository Interfaces (DAO)**
#### **ConversationRepository**
```java
package com.chatbot.repository;

import com.chatbot.entity.Conversation;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.UUID;

public interface ConversationRepository extends JpaRepository<Conversation, UUID> {
    List<Conversation> findByUserIdAndReportIdAndDeletedAtIsNull(String userId, UUID reportId);
}
```

---

#### **MessageRepository**
```java
package com.chatbot.repository;

import com.chatbot.entity.Message;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.UUID;

public interface MessageRepository extends JpaRepository<Message, UUID> {
    List<Message> findByConversationIdOrderByCreatedAtAsc(UUID conversationId);
}
```

---

### **5. Service Layer**
#### **ConversationService**
```java
package com.chatbot.service;

import com.chatbot.entity.Conversation;
import com.chatbot.entity.Message;
import com.chatbot.repository.ConversationRepository;
import com.chatbot.repository.MessageRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class ConversationService {
    private final ConversationRepository conversationRepository;
    private final MessageRepository messageRepository;

    // Fetch all conversations for a user and report
    public List<Conversation> getConversationsByReport(String userId, UUID reportId) {
        return conversationRepository.findByUserIdAndReportIdAndDeletedAtIsNull(userId, reportId);
    }

    // Load a specific conversation
    public List<Message> getMessages(UUID conversationId) {
        return messageRepository.findByConversationIdOrderByCreatedAtAsc(conversationId);
    }

    // Save a new conversation
    public Conversation createConversation(Conversation conversation) {
        conversation.setCreatedAt(LocalDateTime.now());
        conversation.setUpdatedAt(LocalDateTime.now());
        return conversationRepository.save(conversation);
    }

    // Soft delete a conversation
    @Transactional
    public boolean deleteConversation(UUID conversationId) {
        Optional<Conversation> conversation = conversationRepository.findById(conversationId);
        if (conversation.isPresent()) {
            conversation.get().setDeletedAt(LocalDateTime.now());
            conversationRepository.save(conversation.get());
            return true;
        }
        return false;
    }
}
```

---

### **6. REST API Controller**
#### **ConversationController**
```java
package com.chatbot.controller;

import com.chatbot.entity.Conversation;
import com.chatbot.entity.Message;
import com.chatbot.service.ConversationService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/conversations")
@RequiredArgsConstructor
public class ConversationController {
    private final ConversationService conversationService;

    // Fetch all conversations for a report
    @GetMapping("/{userId}/{reportId}")
    public ResponseEntity<List<Conversation>> getConversations(
            @PathVariable String userId, @PathVariable UUID reportId) {
        return ResponseEntity.ok(conversationService.getConversationsByReport(userId, reportId));
    }

    // Load a conversation
    @GetMapping("/messages/{conversationId}")
    public ResponseEntity<List<Message>> getConversationMessages(@PathVariable UUID conversationId) {
        return ResponseEntity.ok(conversationService.getMessages(conversationId));
    }

    // Create a new conversation
    @PostMapping
    public ResponseEntity<Conversation> createConversation(@RequestBody Conversation conversation) {
        return ResponseEntity.ok(conversationService.createConversation(conversation));
    }

    // Soft delete a conversation
    @DeleteMapping("/{conversationId}")
    public ResponseEntity<String> deleteConversation(@PathVariable UUID conversationId) {
        boolean deleted = conversationService.deleteConversation(conversationId);
        return deleted ? ResponseEntity.ok("Conversation deleted") : ResponseEntity.notFound().build();
    }
}
```

---

### **7. API Endpoints**
| Method | Endpoint | Description |
|--------|----------|-------------|
| **GET** | `/api/conversations/{userId}/{reportId}` | Fetch conversations for a report |
| **GET** | `/api/conversations/messages/{conversationId}` | Load a conversation |
| **POST** | `/api/conversations` | Create a new conversation |
| **DELETE** | `/api/conversations/{conversationId}` | Soft delete a conversation |

---

This implementation provides a **fully functional conversation management microservice**. Let me know if you need enhancements!
